real a = 1., b = 1.;
int m = 10;

border g1(t = 0, 1) {x = 0; y = b*t; label = 1;};
border g2(t = 0, 1) {x = a*t; y = b; label = 1;};
border g3(t = 0, 1) {x = a; y = b*(1 - t); label = 1;};
border g4(t = 0, 1) {x = a*(1 - t); y = 0; label = 1;};

mesh Th = buildmesh (g1(-m) + g2(-m) + g3(-m) + g4(-m));
Th = adaptmesh(Th, hmin = 0.02, hmax = 0.025, nbvx = 1e6);

//func f = atan(10 * (x + y));
//func f = atan2(3*y, x);
func f = exp(10*x);

fespace Vh(Th, P2);
Vh fe = f;
plot(fe, fill=1, wait=1);

int N = 100;
real[int] xs(N);
{
	ifstream file("xs.txt", binary);
	string line;
	for (int i = 0; i < N; ++i) {
		getline(file, line);
		xs[i] = atof(line);
	}
}

real[int] ys(N);
{
	ifstream file("ys.txt", binary);
	string line;
	for (int i = 0; i < N; ++i) {
		getline(file, line);
		ys[i] = atof(line);
	}
}

real[int] zs(N);
for (int i = 0; i < N; ++i) {
	zs[i] = f(xs[i], ys[i]);
}

func real delta(real n, int i) {
	return n^2/pi * exp(-((x - xs[i])*n)^2) * exp(-((y - ys[i])*n)^2);
}
real n = 120.;
macro deltaMacro(i) (n^2/pi * exp(-((x - xs[i])*n)^2) * exp(-((y - ys[i])*n)^2)) //

fespace Vm(Th, P2);
Vm wf;
wf = deltaMacro(0);
real maxist = wf[].max;
wf = zs[0]*wf/maxist;
for (int i = 0; i < N; ++i) {
	wf = wf + zs[i]*deltaMacro(i)/maxist;
}
plot(wf, wait=1, value=1, fill=1);

Vm wh, whz;
wh = deltaMacro(0);
whz = zs[0] * wh;
for (int i = 0; i < N; ++i) {
	wh = wh + deltaMacro(i);
}
for (int i = 0; i < N; ++i) {
	whz = whz + zs[i]*deltaMacro(i);
}

Vh u, v;
real e = 0.1;
problem bottom(u, v) = 
					int2d(Th) ( dx(u)*dx(v) + dy(u)*dy(v) ) 
					+ int2d (Th) ( pow(e, -2) * wh * u * v ) 
					- int2d(Th)( pow(e, -2) * whz * v ) 
					+ on(1, u = f);					
bottom;
plot(u, wait=1, fill=1, value=1);

real error = sqrt(int2d(Th)((fe - u)^2)) / sqrt(int2d(Th)(fe^2));
cout << "error = " << error;

{ ofstream gnu("4func/plot6.dat");
    for (int i = 0; i < Th.nt; i++) {
		for (int j = 0; j < 3; j++) {
			gnu << Th[i][j].x << " " << Th[i][j].y << " " << u[][Vh(i,j)] << endl;
		}
		gnu << Th[i][0].x << " " << Th[i][0].y << " " << u[][Vh(i,0)] << "\n\n\n" << endl;
    }
}